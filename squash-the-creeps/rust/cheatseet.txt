There are some guidelines you can rely on (which you probably already know):
For Godot-native methods
There's no dynamic typing, so you need to cast your object to your desired type before attempting to call methods of that type on it.

Const methods
Calling can be done with either <&MyClass>::base().method() or <&Gd<MyClass>>::method().
Both the godot documentation and the gdext-rust bindings specify which are const and which aren't, the gdext bindings specify that through method signatures (eg: fn get_position(&Node2D) vs fn add_child(&mut Node)).

Non-const methods
Calling can be done with either <&mut MyClass>::base_mut().method() or <&mut Gd<MyClass>::method().

Additionally, you must acquire parameters from your object before calling the method.

For User-made methods
Calling can be done with either: 
<&Gd<MyClass>>::bind().method()
<&mut Gd<MyClass>>::bind_mut().method()
<&MyClass>::method()
<&mut MyClass>::method()

<&Gd<MyClass>>::bind() returns a GdRef<MyClass> which implements Deref<Target = MyClass> , which means it's essentially a reference to your underlying object.

<&mut Gd<MyClass>>::bind_mut() returns a GdMut<MyClass> which implements DerefMut<Target = MyClass> , which means it's essentially a mutable reference to your underlying object.

Note that, the GdMut<MyClass> variable still needs to be declared as mut (the let mut bellow):
let mut bind_mut = my_obj.bind_mut();

Let me break down the key concepts with simple examples based on your Rust-Godot setup. I'll use your existing files as context:

### 1. Const vs Non-Const Methods
```rust
// Const method example (reading position)
let position = self.base().get_position();  // Using base() for const method

// Non-const method example (setting position)
self.base_mut().set_position(Vector3::new(0.0, 1.0, 0.0));  // Using base_mut() for non-const
```

### 2. Casting and Type Safety
```rust
// Getting a node and casting it to correct type
let mut pivot = self.base_mut().get_node_as::<Node3D>("Pivot");  // Must specify type
pivot.set_basis(Basis::looking_at(-direction, Vector3::UP, true));
```

### 3. User-made Methods
```rust
// Calling user methods on Mob
let mut mob = collision.get_collider().unwrap().cast::<Mob>();
mob.bind_mut().squash();  // Using bind_mut() for mutable user method

// Alternative way
let mut mob = collision.get_collider().unwrap().cast::<Mob>();
let mut mob_bind = mob.bind_mut();
mob_bind.squash();
```

### 4. Parameter Acquisition
```rust
// Getting parameters before setting
let rotation = self.base().get_rotation();  // First get
let velocity = self.base().get_velocity();  // Then get
self.base_mut().set_velocity(velocity.rotated(Vector3::UP, rotation.y));  // Then set
```

### 5. Practical Example from Your Code
Let's analyze this snippet from your player.rs:

```rust
if let Some(collider) = collision.get_collider() {
    if let Some(node) = collider.try_cast::<Node3D>().ok() {
        if node.is_in_group("mob") {
            let mut mob = collision.get_collider().unwrap().cast::<Mob>();
            if Vector3::UP.dot(collision.get_normal()) > 0.1 {
                mob.bind_mut().squash();
                self.target_velocity.y = self.bounce_impulse;
                break;
            }
        }
    }
}
```

Breaking it down:
1. `collision.get_collider()` - Const method, returns Option
2. `try_cast::<Node3D>()` - Type casting attempt
3. `node.is_in_group("mob")` - Const method check
4. `cast::<Mob>()` - Type casting
5. `mob.bind_mut().squash()` - Calling user method with mutable binding

### Key Takeaways:
1. **Const Methods** - Use `base()` or direct reference, for reading data
2. **Non-Const Methods** - Use `base_mut()` or mutable reference, for modifying data
3. **Type Safety** - Always cast to correct type before using methods
4. **User Methods** - Use `bind()` for const, `bind_mut()` for mutable
5. **Parameter Flow** - Get parameters first, then use them in operations

Would you like me to create more specific examples or explain any of these concepts in more detail?